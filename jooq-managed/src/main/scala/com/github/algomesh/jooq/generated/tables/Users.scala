/*
 * This file is generated by jOOQ.
 */
package com.github.algomesh.jooq.generated.tables


import com.github.algomesh.jooq.generated.DefaultSchema
import com.github.algomesh.jooq.generated.Keys
import com.github.algomesh.jooq.generated.tables.records.UsersRecord

import java.lang.Boolean
import java.lang.Class
import java.lang.String
import java.time.LocalDate
import java.util.Arrays
import java.util.Collection
import java.util.List
import java.util.UUID

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import scala.Array


object Users {

  /**
   * The reference instance of <code>USERS</code>
   */
  val USERS = new Users
}

/**
 * This class is generated by jOOQ.
 */
class Users(
  alias: Name,
  path: Table[_ <: Record],
  childPath: ForeignKey[_ <: Record, UsersRecord],
  parentPath: InverseForeignKey[_ <: Record, UsersRecord],
  aliased: Table[UsersRecord],
  parameters: Array[ Field[_] ],
  where: Condition
)
extends TableImpl[UsersRecord](
  alias,
  DefaultSchema.DEFAULT_SCHEMA,
  path,
  childPath,
  parentPath,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.table,
  where
) {

  /**
   * The class holding records for this type
   */
  override def getRecordType: Class[UsersRecord] = classOf[UsersRecord]

  /**
   * The column <code>USERS.ID</code>.
   */
  val ID: TableField[UsersRecord, UUID] = createField(DSL.name("ID"), SQLDataType.UUID.nullable(false), "")

  /**
   * The column <code>USERS.EMAIL</code>.
   */
  val EMAIL: TableField[UsersRecord, String] = createField(DSL.name("EMAIL"), SQLDataType.VARCHAR(50).nullable(false), "")

  /**
   * The column <code>USERS.FIRST_NAME</code>.
   */
  val FIRST_NAME: TableField[UsersRecord, String] = createField(DSL.name("FIRST_NAME"), SQLDataType.VARCHAR(20).nullable(false), "")

  /**
   * The column <code>USERS.LAST_NAME</code>.
   */
  val LAST_NAME: TableField[UsersRecord, String] = createField(DSL.name("LAST_NAME"), SQLDataType.VARCHAR(20), "")

  /**
   * The column <code>USERS.DOB</code>.
   */
  val DOB: TableField[UsersRecord, LocalDate] = createField(DSL.name("DOB"), SQLDataType.LOCALDATE, "")

  /**
   * The column <code>USERS.CREATED_DATE</code>.
   */
  val CREATED_DATE: TableField[UsersRecord, LocalDate] = createField(DSL.name("CREATED_DATE"), SQLDataType.LOCALDATE, "")

  /**
   * The column <code>USERS.IS_ENABLED</code>.
   */
  val IS_ENABLED: TableField[UsersRecord, Boolean] = createField(DSL.name("IS_ENABLED"), SQLDataType.BOOLEAN, "")

  private def this(alias: Name, aliased: Table[UsersRecord]) = this(alias, null, null, null, aliased, null, null)
  private def this(alias: Name, aliased: Table[UsersRecord], where: Condition) = this(alias, null, null, null, aliased, null, where)

  /**
   * Create an aliased <code>USERS</code> table reference
   */
  def this(alias: String) = this(DSL.name(alias), com.github.algomesh.jooq.generated.tables.Users.USERS)

  /**
   * Create an aliased <code>USERS</code> table reference
   */
  def this(alias: Name) = this(alias, com.github.algomesh.jooq.generated.tables.Users.USERS)

  /**
   * Create a <code>USERS</code> table reference
   */
  def this() = this(DSL.name("USERS"), null)

  override def getSchema: Schema = if (super.aliased()) null else DefaultSchema.DEFAULT_SCHEMA

  override def getPrimaryKey: UniqueKey[UsersRecord] = Keys.CONSTRAINT_4

  override def getUniqueKeys: List[ UniqueKey[UsersRecord] ] = Arrays.asList[ UniqueKey[UsersRecord] ](Keys.CONSTRAINT_4D)
  override def as(alias: String): Users = new Users(DSL.name(alias), this)
  override def as(alias: Name): Users = new Users(alias, this)
  override def as(alias: Table[_]): Users = new Users(alias.getQualifiedName(), this)

  /**
   * Rename this table
   */
  override def rename(name: String): Users = new Users(DSL.name(name), null)

  /**
   * Rename this table
   */
  override def rename(name: Name): Users = new Users(name, null)

  /**
   * Rename this table
   */
  override def rename(name: Table[_]): Users = new Users(name.getQualifiedName(), null)

  /**
   * Create an inline derived table from this table
   */
  override def where(condition: Condition): Users = new Users(getQualifiedName(), if (super.aliased()) this else null, condition)

  /**
   * Create an inline derived table from this table
   */
  override def where(conditions: Collection[_ <: Condition]): Users = where(DSL.and(conditions))

  /**
   * Create an inline derived table from this table
   */
  override def where(conditions: Condition*): Users = where(DSL.and(conditions:_*))

  /**
   * Create an inline derived table from this table
   */
  override def where(condition: Field[Boolean]): Users = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override def where(condition: SQL): Users = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override def where(@Stringly.SQL condition: String): Users = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override def where(@Stringly.SQL condition: String, binds: AnyRef*): Users = where(DSL.condition(condition, binds:_*))

  /**
   * Create an inline derived table from this table
   */
  override def whereExists(select: Select[_]): Users = where(DSL.exists(select))

  /**
   * Create an inline derived table from this table
   */
  override def whereNotExists(select: Select[_]): Users = where(DSL.notExists(select))
}
